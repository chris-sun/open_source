####################
# clone cloning
####################
# Cloning a public project from Github
git clone git://github.com/twitter/bootstrap.git
# Cloning a public project from Github and save to specific directory
git clone git://github.com/twitter/bootstrap.git some_directory_name
# Cloning a private project from Github
git clone git@github.com:username/project.git

####################
# branches
####################
# list all branches
git branch
# create a new branch and go to it
git checkout -b new_branch
# go to different branch
git checkout the_branch

# Deleting a local branch
git branch -d the_branch_name
# Deleting a remote branch
git push origin :the_remote_branch

####################
# remotes remote
####################
# Show the list of remotes
git remote -v
# show details about a remote
git remote show origin
# Add a remote
git remote add origin git@github.com:<username>/sample_app.git

####################
# stash 
####################
git stash save "work for feature x"
git stash list
git stash apply
git stash drop
# view stash without applying it
git stash show -p stash@{0}

########################################
# revert restore reset previous state
########################################
# READ THIS FIRST
http://git-scm.com/2011/07/11/reset.html

# Restoring (reverting) file to previous state (last commmit)
git checkout -- hello.rb
git checkout HEAD hello.rb

# Restoring (reverting) file to specific version
# Find out version using "git log" or github.com
git checkout 69cf529c some_file

####################
# config Config
####################
# Show all configs
git config --list
# show specific setting
git config user.name
# change a setting
git config core.filemode true
# delete a setting
git config --unset diff.renames
# Use a .gitconfig file
# to set values automatically

####################
# some settings I've used in the past
# settings configs
####################
git config --global diff.tool opendiff


